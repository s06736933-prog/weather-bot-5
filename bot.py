import os
import requests
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
weather_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –°—Ç–∞—Ä–æ–π –†—É—Å—Å–µ")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def get_weather(city: str) -> str:
    api_key = os.getenv('WEATHER_API_KEY')
    if not api_key:
        return "‚ùå API –∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if response.status_code == 200:
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            humidity = data['main']['humidity']
            description = data['weather'][0]['description']
            wind_speed = data['wind']['speed']
            
            return (f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –°—Ç–∞—Ä–æ–π –†—É—Å—Å–µ:\n"
                    f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
                    f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
                    f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"‚Ä¢ {description.capitalize()}\n"
                    f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å")
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –°—Ç–∞—Ä–æ–π –†—É—Å—Å–µ.",
        reply_markup=weather_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message()
async def handle_weather_request(message: Message):
    text = message.text.lower()
    
    if "–ø–æ–≥–æ–¥" in text and "—Å—Ç–∞—Ä–æ–π —Ä—É—Å—Å–µ" in text or text == "üå§ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å—Ç–∞—Ä–æ–π —Ä—É—Å—Å–µ":
        weather_info = await get_weather("Staraya Russa")
        await message.answer(weather_info, reply_markup=weather_kb)
    elif "–ø–æ–≥–æ–¥" in text:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã", reply_markup=weather_kb)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º", reply_markup=weather_kb)

# –§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def handle(request):
    return web.Response(text="Bot is running")

async def start_dummy_server():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)
    await site.start()
    print("‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    loop.create_task(start_dummy_server())
    loop.run_until_complete(main())